import os
import subprocess
import tempfile
import shutil
from typing import Optional
from fastapi import HTTPException
from com.mhire.app.common.network_responses import HTTPCode
from com.mhire.app.config.config import Config

class DocumentConverter:
    """Factory class for document conversion operations"""
    
    def __init__(self):
        self.config = Config()
    
    def convert_to_pdf(self, file_path: str) -> str:
        """
        Convert any file type to PDF format if it's not already a PDF.
        Returns the path to the PDF file.
        """
        file_extension = os.path.splitext(file_path)[1].lower()
        
        # If already PDF, return original path
        if file_extension == '.pdf':
            print("File is already in PDF format.")
            return file_path
        
        # Define output PDF path
        base_name = os.path.splitext(os.path.basename(file_path))[0]
        output_dir = os.path.dirname(file_path)
        output_pdf_path = os.path.join(output_dir, f"{base_name}_converted.pdf")
        
        print(f"Converting {file_extension} file to PDF...")
        
        # Office documents (including Excel)
        if file_extension in ['.doc', '.docx', '.ppt', '.pptx', '.xls', '.xlsx', '.odt', '.ods', '.odp']:
            self._convert_office_to_pdf(file_path, output_pdf_path)
        
        # Text-based files
        elif file_extension in ['.txt', '.rtf', '.csv', '.html', '.htm', '.xml', '.json', '.yaml', '.yml', '.py', '.js', '.css', '.java', '.cpp', '.c', '.sql']:
            self._convert_text_to_pdf(file_path, output_pdf_path)
        
        # Image files
        elif file_extension in ['.jpg', '.jpeg', '.png', '.tiff', '.tif', '.bmp', '.gif', '.webp', '.svg']:
            self._convert_image_to_pdf(file_path, output_pdf_path)
        
        # Archive files
        elif file_extension in ['.zip', '.rar', '.7z']:
            self._convert_archive_to_pdf(file_path, output_pdf_path)
        
        # Unsupported formats
        else:
            raise Exception(f"Unsupported file format: {file_extension}")
        
        if os.path.exists(output_pdf_path):
            print(f"Successfully converted to PDF: {os.path.basename(output_pdf_path)}")
            return output_pdf_path
        else:
            raise Exception("PDF conversion failed")
    
    def _convert_office_to_pdf(self, input_path: str, output_path: str) -> None:
        """Convert Office documents to PDF using LibreOffice"""
        try:
            # Create a temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                # Copy file to temp directory with simple name
                temp_input = os.path.join(temp_dir, "input" + os.path.splitext(input_path)[1])
                shutil.copy2(input_path, temp_input)
                
                # Run LibreOffice conversion
                cmd = [
                    'libreoffice', '--headless', '--convert-to', 'pdf',
                    '--outdir', temp_dir, temp_input
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
                
                if result.returncode == 0:
                    # Find the generated PDF
                    temp_pdf = os.path.join(temp_dir, "input.pdf")
                    if os.path.exists(temp_pdf):
                        shutil.copy2(temp_pdf, output_path)
                        return
                    else:
                        raise Exception("PDF not generated by LibreOffice")
                else:
                    raise Exception(f"LibreOffice failed: {result.stderr}")
                    
        except subprocess.TimeoutExpired:
            raise Exception("LibreOffice conversion timed out")
        except FileNotFoundError:
            raise Exception("LibreOffice not found. Please install LibreOffice.")
    
    def _convert_text_to_pdf(self, input_path: str, output_path: str) -> None:
        """Convert text file to PDF"""
        try:
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib.pagesizes import letter
            
            # Read the text file
            text = self._read_text_file(input_path)
            
            # Create PDF
            doc = SimpleDocTemplate(output_path, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # Split text into paragraphs
            paragraphs = text.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    # Clean the text for PDF
                    clean_para = para.replace('\n', '<br/>')
                    story.append(Paragraph(clean_para, styles['Normal']))
                    story.append(Spacer(1, 12))
            
            doc.build(story)
            
        except ImportError:
            raise Exception("Required libraries not installed: pip install reportlab")
        except Exception as e:
            raise Exception(f"Text to PDF conversion failed: {e}")
    
    def _read_text_file(self, file_path: str) -> str:
        """Read text file with multiple encoding attempts"""
        encodings = ['utf-8', 'utf-16', 'latin-1', 'cp1252', 'ascii']
        
        for encoding in encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    return f.read()
            except UnicodeDecodeError:
                continue
        
        raise Exception("Could not read text file with any supported encoding")
    
    def _convert_archive_to_pdf(self, input_path: str, output_path: str) -> None:
        """Convert archive files to PDF by listing contents"""
        try:
            import zipfile
            
            file_extension = os.path.splitext(input_path)[1].lower()
            content_text = f"Archive Contents: {os.path.basename(input_path)}\n\n"
            
            if file_extension == '.zip':
                with zipfile.ZipFile(input_path, 'r') as zip_file:
                    file_list = zip_file.namelist()
                    content_text += "Files in archive:\n"
                    for file_name in file_list:
                        content_text += f"- {file_name}\n"
            else:
                raise Exception(f"Archive format {file_extension} not supported")
            
            # Create temporary text file and convert to PDF
            temp_txt = output_path + '.tmp.txt'
            with open(temp_txt, 'w', encoding='utf-8') as f:
                f.write(content_text)
            
            self._convert_text_to_pdf(temp_txt, output_path)
            
            # Clean up temp file
            if os.path.exists(temp_txt):
                os.remove(temp_txt)
                
        except ImportError:
            raise Exception("Required libraries not installed for archive processing")
        except Exception as e:
            raise Exception(f"Archive to PDF conversion failed: {e}")
    
    def _convert_image_to_pdf(self, input_path: str, output_path: str) -> None:
        """Convert image to PDF"""
        try:
            from PIL import Image
            
            image = Image.open(input_path)
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            image.save(output_path, 'PDF')
            
        except ImportError:
            raise Exception("Required libraries not installed: pip install Pillow")
        except Exception as e:
            raise Exception(f"Image to PDF conversion failed: {e}")